@using Tomeshelf.Web.Models.ComicCon
@model IReadOnlyList<GuestsGroupModel>
@{
    ViewData["Title"] = "Guests by City";
    var city = (string)ViewBag.City;
    var total = (int)ViewBag.Total;
    var culture = System.Globalization.CultureInfo.CurrentCulture;
    Func<int, string> ord = d =>
    {
        if (!string.Equals(culture.TwoLetterISOLanguageName, "en", StringComparison.OrdinalIgnoreCase))
        {
            return d.ToString(culture);
        }
        var rem100 = d % 100;
        if (rem100 >= 11 && rem100 <= 13) return d + "th";
        return (d % 10) switch { 1 => d + "st", 2 => d + "nd", 3 => d + "rd", _ => d + "th" };
    };
    var removed = Model?.SelectMany(g => g.Items).Where(p => p != null && p.PubliclyVisible == false).GroupBy(p => p.Id).Select(g => g.First()).ToList();
}


<div class="py-3">
    <div class="bg-light rounded-3 p-3 p-md-4 mb-3 d-flex align-items-center justify-content-between">
        <div>
            <h1 class="h4 mb-1">Guests &ndash; @city</h1>
            <div class="text-muted small">@total guest@(total == 1 ? "" : "s")</div>
        </div>
        <div class="d-flex gap-2 ms-3">
            <button id="expand-all" class="btn btn-outline-secondary btn-sm" type="button">Expand all</button>
            <button id="collapse-all" class="btn btn-outline-secondary btn-sm" type="button">Collapse all</button>
        </div>
    </div>

    @{ var warming = (bool)(ViewBag.WarmingUp ?? false); }
    @if (warming)
    {
        <div class="alert alert-info" role="alert">
            Warming up data for @city... Please refresh in a few seconds.
        </div>
    }
    @if (!warming && (total == 0 || !Model.Any()))
    {
        <div class="text-muted py-5 text-center">No guests found.</div>
    }
    else
    {
        <div class="accordion" id="guestGroups">
            @if (removed?.Count > 0)
            {
                var rid = "acc-removed";
                var rbClass = "accordion-button";
                var rcClass = "accordion-collapse collapse show";
                <div class="accordion-item border-danger">
                    <h2 class="accordion-header" id="heading-@rid">
                        <button class="@rbClass text-danger fw-semibold" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@rid" aria-expanded="true" aria-controls="collapse-@rid">
                            <span class="me-2">Removed</span>
                            <span class="badge text-bg-danger">@removed.Count</span>
                        </button>
                    </h2>
                    <div id="collapse-@rid" class="@rcClass" aria-labelledby="heading-@rid">
                        <div class="accordion-body">
                            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
                                @foreach (var g in removed)
                                {
                                    var displayName = string.Join(" ", new[] { g.FirstName, g.LastName }.Where(s => !string.IsNullOrWhiteSpace(s))).Trim();
                                    var img = g.Images?.FirstOrDefault();
                                    var imgUrl = img?.Med ?? img?.Big ?? img?.Small ?? img?.Thumb;
                                    var firstInitial = string.IsNullOrWhiteSpace(g.FirstName) ? "" : g.FirstName.Substring(0, 1).ToUpperInvariant();
                                    var lastInitial = string.IsNullOrWhiteSpace(g.LastName) ? "" : g.LastName.Substring(0, 1).ToUpperInvariant();
                                    var initials = (firstInitial + lastInitial);
                                    DateTime removedDate;
                                    var removedDateText = DateTime.TryParse(g.RemovedAt, out removedDate) ? removedDate.ToString("yyyy-MM-dd") : "";
                                    <div class="col">
                                        <div class="card guest-card h-100 border-danger border-1 shadow-sm">
                                            <div class="position-relative ratio ratio-4x3 guest-img">
                                                @if (!string.IsNullOrEmpty(imgUrl))
                                                {
                                                    <img src="@imgUrl" loading="lazy" class="object-fit-contain img-thumbnail" alt="@displayName" />
                                                }
                                                else
                                                {
                                                    <div class="guest-img-fallback rounded-top">@initials</div>
                                                }
                                            </div>
                                            <div class="card-body d-flex flex-column">
                                                <h2 class="h6 card-title mb-1 text-truncate" title="@displayName">@displayName</h2>
                                                @if (!string.IsNullOrEmpty(removedDateText))
                                                {
                                                    <div class="small text-danger mb-2">Removed @removedDateText</div>
                                                }
                                                <div class="mt-auto"></div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            @for (var i = 0; i < Model.Count; i++)
            {
                var group = Model[i];
                var itemsVisible = group.Items?.Where(p => p != null && p.PubliclyVisible).ToList() ?? new List<PersonModel>();
                if (itemsVisible.Count == 0) { continue; }
                var dayName = culture.DateTimeFormat.GetDayName(group.CreatedDate.DayOfWeek);
                var monthName = culture.DateTimeFormat.GetMonthName(group.CreatedDate.Month);
                var title = $"Added on {dayName} - {ord(group.CreatedDate.Day)} {monthName}";
                var id = $"acc-{group.CreatedDate:yyyyMMdd}-{i}";
                var isOpen = (removed == null || removed.Count == 0) ? i == 0 : false;
                var btnClass = isOpen ? "accordion-button" : "accordion-button collapsed";
                var expanded = isOpen ? "true" : "false";
                var collapseClass = isOpen ? "accordion-collapse collapse show" : "accordion-collapse collapse";
                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading-@id">
                        <button class="@btnClass" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@id" aria-expanded="@expanded" aria-controls="collapse-@id">
                            <span class="me-2">@title</span>
                            <span class="badge text-bg-secondary">@itemsVisible.Count</span>
                        </button>
                    </h2>
                    <div id="collapse-@id" class="@collapseClass" aria-labelledby="heading-@id">
                        <div class="accordion-body">
                            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
                                @foreach (var g in itemsVisible)
                                {
                                    var displayName = string.Join(" ", new[] { g.FirstName, g.LastName }.Where(s => !string.IsNullOrWhiteSpace(s))).Trim();
                                    var img = g.Images?.FirstOrDefault();
                                    var imgUrl = img?.Med ?? img?.Big ?? img?.Small ?? img?.Thumb;
                                    var firstInitial = string.IsNullOrWhiteSpace(g.FirstName) ? "" : g.FirstName.Substring(0, 1).ToUpperInvariant();
                                    var lastInitial = string.IsNullOrWhiteSpace(g.LastName) ? "" : g.LastName.Substring(0, 1).ToUpperInvariant();
                                    var initials = (firstInitial + lastInitial);

                                    <div class="col">
                                        <div class="card guest-card h-100 border-0 shadow-sm">
                                            <div class="position-relative ratio ratio-4x3 guest-img">
                                                @if (!string.IsNullOrEmpty(imgUrl))
                                                {
                                                    <img src="@imgUrl" loading="lazy" class="object-fit-contain img-thumbnail" alt="@displayName" />
                                                }
                                                else
                                                {
                                                    <div class="guest-img-fallback rounded-top">@initials</div>
                                                }
                                            </div>
                                            <div class="card-body d-flex flex-column">
                                                <h2 class="h6 card-title mb-1 text-truncate" title="@displayName">@displayName</h2>
                                                <div class="mb-2 d-flex flex-wrap gap-1 small">
                                                    @if (!string.IsNullOrEmpty(g.BoothNumber))
                                                    {
                                                        <span class="badge text-bg-secondary">@g.BoothNumber</span>
                                                    }
                                                    @if (!string.IsNullOrEmpty(g.DaysAtShow))
                                                    {
                                                        <span class="badge text-bg-light border">@g.DaysAtShow</span>
                                                    }
                                                </div>
                                                @{
                                                    var knownForText = string.IsNullOrWhiteSpace(g.KnownFor) ? null : System.Net.WebUtility.HtmlDecode(g.KnownFor);
                                                }
                                                @if (!string.IsNullOrWhiteSpace(knownForText))
                                                {
                                                    <p class="card-text small mb-2 text-clamp-2" title="@knownForText"><span class="text-muted">Known for:</span> @knownForText</p>
                                                }
                                                <div class="mb-2 d-flex flex-wrap gap-1">
                                                    @foreach (var c in (g.GlobalCategories ?? [])
                                                        .Where(c => !string.IsNullOrWhiteSpace(c.Name)
                                                            && !string.Equals(c.Name.Trim(), "Canceled", System.StringComparison.OrdinalIgnoreCase)
                                                            && !string.Equals(c.Name.Trim(), "Cancelled", System.StringComparison.OrdinalIgnoreCase))
                                                        .Take(3))
                                                    {
                                                        <span class="badge rounded-pill text-bg-light border">@System.Net.WebUtility.HtmlDecode(c.Name)</span>
                                                    }
                                                </div>
                                                <div class="mt-auto d-flex flex-wrap gap-3 small text-muted">
                                                    @if (g.AutographAmount is not null)
                                                    {
                                                        <div title="Autograph amount">Autograph: @g.AutographAmount?.ToString("C0", System.Globalization.CultureInfo.GetCultureInfo("en-GB"))</div>
                                                    }
                                                    @if (g.PhotoOpAmount is not null)
                                                    {
                                                        <div title="Photo op amount">Photo Op: @g.PhotoOpAmount?.ToString("C0", System.Globalization.CultureInfo.GetCultureInfo("en-GB"))</div>
                                                    }
                                                </div>
                                                @if (!string.IsNullOrWhiteSpace(g.ProfileUrl))
                                                {
                                                    <div class="mt-2">
                                                        <a class="btn btn-sm btn-outline-primary" href="@g.ProfileUrl" target="_blank" rel="noopener">Profile</a>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('guestGroups');
            const expandBtn = document.getElementById('expand-all');
            const collapseBtn = document.getElementById('collapse-all');
            if (!container) return;
            const getCollapses = () => Array.from(container.querySelectorAll('.accordion-collapse'));
            expandBtn?.addEventListener('click', function (e) {
                e.preventDefault();
                getCollapses().forEach(el => new bootstrap.Collapse(el, { toggle: false }).show());
            });
            collapseBtn?.addEventListener('click', function (e) {
                e.preventDefault();
                getCollapses().forEach(el => new bootstrap.Collapse(el, { toggle: false }).hide());
            });
        });
    </script>
}
