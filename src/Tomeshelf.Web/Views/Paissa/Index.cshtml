@model Tomeshelf.Web.Models.Paissa.PaissaIndexViewModel

@{
    ViewData["Title"] = "Paissa Housing";
}

<div class="d-flex align-items-center mb-3">
    <h1 class="mb-0">Paissa Housing</h1>
    <span class="badge text-bg-primary ms-3">World @Model.WorldName (@Model.WorldId)</span>
</div>
<p class="text-muted">
    Showing @Model.TotalPlotCount plot@(Model.TotalPlotCount == 1
                                              ? string.Empty
                                              : "s") accepting entries.
    Data captured at @Model.RetrievedAtUtc.ToLocalTime().ToString("f").
</p>

<div id="favouritePlots" class="d-none p-4 mb-4 bg-body-tertiary border rounded-3">
    <div class="d-flex justify-content-between align-items-start mb-3">
        <h2 class="h5 mb-0">Favourite Plots</h2>
        <button type="button" class="btn btn-sm btn-outline-secondary" id="clearFavourites">Clear all</button>
    </div>
    <div id="favouriteList" class="row row-cols-1 row-cols-md-2 g-3"></div>
</div>

@if (!Model.Districts.Any())
{
    <div class="alert alert-info">
        No districts currently have plots accepting entries. Please check back later.
    </div>
}
else
{
    <ul class="nav nav-tabs" id="districtTabs" role="tablist">
        @for (var i = 0; i < Model.Districts.Count; i++)
        {
            var district = Model.Districts[i];
            var tabId = $"district-{district.Id}";
            var isActive = i == 0;
            var plotCount = district.Tabs.Sum(t => t.Plots.Count);
            <li class="nav-item" role="presentation">
                <button class="nav-link@(isActive
                                               ? " active"
                                               : string.Empty)" id="@($"{tabId}-tab")" data-bs-toggle="tab" data-bs-target="@($"#{tabId}")" type="button" role="tab" aria-controls="@tabId" aria-selected="@isActive">
                    @district.Name
                    <span class="badge text-bg-secondary ms-2">@plotCount</span>
                </button>
            </li>
        }
    </ul>
    <div class="tab-content pt-3" id="districtTabContent">
        @for (var i = 0; i < Model.Districts.Count; i++)
        {
            var district = Model.Districts[i];
            var tabId = $"district-{district.Id}";
            var accordionId = $"{tabId}-accordion";
            var isActive = i == 0;

            <div class="tab-pane fade@(isActive
                                             ? " show active"
                                             : string.Empty)" id="@tabId" role="tabpanel" aria-labelledby="@($"{tabId}-tab")" tabindex="0">
                <div class="accordion" id="@accordionId">
                    @for (var j = 0; j < district.Tabs.Count; j++)
                    {
                        var size = district.Tabs[j];
                        var collapseId = $"{accordionId}-{size.SizeKey}";
                        var headerId = $"{collapseId}-heading";
                        var isOpen = j == 0;

                        <div class="accordion-item">
                            <h2 class="accordion-header" id="@headerId">
                                <button class="accordion-button@(isOpen
                                                                       ? string.Empty
                                                                       : " collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="@($"#{collapseId}")" aria-expanded="@isOpen" aria-controls="@collapseId">
                                    @size.Size
                                    <span class="badge text-bg-secondary ms-2">@size.Plots.Count</span>
                                </button>
                            </h2>
                            <div id="@collapseId" class="accordion-collapse collapse@(isOpen
                                                                                            ? " show"
                                                                                            : string.Empty)" aria-labelledby="@headerId" data-bs-parent="@($"#{accordionId}")">
                                <div class="accordion-body">
                                    @if (!size.Plots.Any())
                                    {
                                        <div class="alert alert-info mb-0">
                                            There are no @size.Size.ToLowerInvariant() plots accepting entries this bidding period.
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-sm align-middle">
                                                <thead>
                                                <tr>
                                                    <th scope="col" class="text-center">Fav</th>
                                                    <th scope="col">Ward</th>
                                                    <th scope="col">Plot</th>
                                                    <th scope="col">Price</th>
                                                    <th scope="col">Entries</th>
                                                    <th scope="col">Last Updated</th>
                                                    <th scope="col">Eligibility</th>
                                                </tr>
                                                </thead>
                                                <tbody>
                                                @foreach (var plot in size.Plots)
                                                {
                                                    var plotId = $"{Model.WorldId}-{district.Id}-{size.SizeKey}-{plot.Ward}-{plot.Plot}";
                                                    <tr>
                                                        <td class="text-center">
                                                            <input type="checkbox"
                                                                   class="form-check-input favourite-toggle"
                                                                   data-plot-id="@plotId"
                                                                   data-district="@district.Name"
                                                                   data-size="@size.Size"
                                                                   data-ward="@plot.Ward"
                                                                   data-plot="@plot.Plot"
                                                                   data-price="@plot.Price"
                                                                   data-entries="@plot.Entries"
                                                                   data-last-updated="@plot.LastUpdatedUtc.ToUniversalTime().ToString("O")"
                                                                   aria-label="Toggle favourite for @size.Size plot in @district.Name, Ward @plot.Ward, Plot @plot.Plot"/>
                                                        </td>
                                                        <td>@plot.Ward</td>
                                                        <td>@plot.Plot</td>
                                                        <td>
                                                            <span class="fw-semibold">@plot.Price.ToString("N0")</span>
                                                            <small class="text-muted">gil</small>
                                                        </td>
                                                        <td>@plot.Entries</td>
                                                        <td>@plot.LastUpdatedUtc.ToLocalTime().ToString("g")</td>
                                                        <td>
                                                            @if (plot.AllowsPersonal)
                                                            {
                                                                <span class="badge text-bg-primary me-1">Personal</span>
                                                            }
                                                            @if (plot.AllowsFreeCompany)
                                                            {
                                                                <span class="badge text-bg-warning me-1">Free Company</span>
                                                            }
                                                            @if (plot.IsEligibilityUnknown)
                                                            {
                                                                <span class="badge text-bg-secondary">Unknown</span>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@section Scripts
{
    <script>
        (() => {
            const storageKey = 'tomeshelf.paissa.favourites';
            const container = document.getElementById('favouritePlots');
            const list = document.getElementById('favouriteList');
            const clearBtn = document.getElementById('clearFavourites');

            const loadFavourites = () => {
                try {
                    const raw = localStorage.getItem(storageKey);
                    return raw ? JSON.parse(raw) : [];
                } catch {
                    return [];
                }
            };

            let favourites = loadFavourites();

            const saveFavourites = () => {
                localStorage.setItem(storageKey, JSON.stringify(favourites));
            };

            const parseNumber = value => {
                const parsed = Number(value);
                return Number.isNaN(parsed) ? 0 : parsed;
            };

            const parseFavouriteFromCheckbox = checkbox => ({
                id: checkbox.dataset.plotId ?? '',
                district: checkbox.dataset.district ?? '',
                size: checkbox.dataset.size ?? '',
                ward: parseNumber(checkbox.dataset.ward),
                plot: parseNumber(checkbox.dataset.plot),
                price: parseNumber(checkbox.dataset.price),
                entries: parseNumber(checkbox.dataset.entries),
                lastUpdated: checkbox.dataset.lastUpdated ?? new Date().toISOString()
            });

            const favouritesMatch = (a, b) =>
                a.district === b.district
                && a.size === b.size
                && a.ward === b.ward
                && a.plot === b.plot
                && a.price === b.price
                && a.entries === b.entries
                && a.lastUpdated === b.lastUpdated;

            const refreshFavouritesFromDom = () => {
                if (favourites.length === 0) {
                    return;
                }

                const toggles = Array.from(document.querySelectorAll('.favourite-toggle'));
                if (toggles.length === 0) {
                    return;
                }

                const latestById = new Map();
                toggles.forEach(cb => {
                    if (!cb.dataset.plotId) {
                        return;
                    }

                    const parsed = parseFavouriteFromCheckbox(cb);
                    latestById.set(parsed.id, parsed);
                });

                if (latestById.size === 0) {
                    return;
                }

                let updated = false;
                const merged = favourites.map(existing => {
                    const latest = latestById.get(existing.id);
                    if (!latest) {
                        return existing;
                    }

                    if (!favouritesMatch(existing, latest)) {
                        updated = true;
                    }

                    return latest;
                });

                favourites = merged;

                if (updated) {
                    saveFavourites();
                }
            };

            refreshFavouritesFromDom();

            const renderFavourites = () => {
                if (!container || !list) {
                    return;
                }

                list.innerHTML = '';

                if (favourites.length === 0) {
                    container.classList.add('d-none');
                    return;
                }

                container.classList.remove('d-none');

                favourites.forEach(f => {
                    const col = document.createElement('div');
                    col.className = 'col';

                    const card = document.createElement('div');
                    card.className = 'card h-100 border-0 shadow-sm';

                    const body = document.createElement('div');
                    body.className = 'card-body';

                    const updated = new Date(f.lastUpdated);

                    body.innerHTML = `
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <div>
                                <span class="badge text-bg-secondary mb-1">${f.district}</span>
                                <div class="fw-semibold">${f.size}</div>
                            </div>
                            <div class="btn-group" role="group" aria-label="Favourite actions">
                                <button type="button" class="btn btn-sm btn-outline-primary copy-commands" data-id="${f.id}" title="Copy /li command">
                                    <i class="bi bi-clipboard" aria-hidden="true"></i>
                                    <span class="visually-hidden">Copy command</span>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger remove-favourite" data-id="${f.id}">
                                    <i class="bi bi-x-lg" aria-hidden="true"></i>
                                    <span class="visually-hidden">Remove favourite</span>
                                </button>
                            </div>
                        </div>
                        <div class="small mb-1">Ward <strong>${f.ward}</strong>, Plot <strong>${f.plot}</strong></div>
                        <div class="small mb-1"><strong>${Number(f.price).toLocaleString()}</strong> gil &middot; Entries: ${f.entries}</div>
                        <div class="small text-muted">Updated: ${updated.toLocaleString()}</div>
                        `;

                    card.appendChild(body);
                    col.appendChild(card);
                    list.appendChild(col);
                });
            };

            const syncCheckboxes = () => {
                document.querySelectorAll('.favourite-toggle').forEach(cb => {
                    cb.checked = favourites.some(f => f.id === cb.dataset.plotId);
                });
            };

            const upsertFavourite = checkbox => {
                const id = checkbox.dataset.plotId;
                favourites = favourites.filter(f => f.id !== id);

                if (checkbox.checked) {
                    favourites.push(parseFavouriteFromCheckbox(checkbox));
                }

                saveFavourites();
                renderFavourites();
                syncCheckboxes();
            };

            if (clearBtn) {
                clearBtn.addEventListener('click', () => {
                    favourites = [];
                    saveFavourites();
                    renderFavourites();
                    syncCheckboxes();
                });
            }

            document.addEventListener('change', event => {
                const target = event.target;
                if (target instanceof HTMLInputElement && target.classList.contains('favourite-toggle')) {
                    upsertFavourite(target);
                }
            });

            document.addEventListener('click', event => {
                const button = event.target instanceof Element ? event.target.closest('button') : null;
                if (!button) {
                    return;
                }

                if (button.classList.contains('remove-favourite')) {
                    const id = button.dataset.id;
                    favourites = favourites.filter(f => f.id !== id);
                    saveFavourites();
                    renderFavourites();
                    const checkbox = document.querySelector(`.favourite-toggle[data-plot-id="${id}"]`);
                    if (checkbox) {
                        checkbox.checked = false;
                    }
                    syncCheckboxes();
                    return;
                }

                if (button.classList.contains('copy-commands')) {
                    const id = button.dataset.id;
                    const favourite = favourites.find(f => f.id === id);
                    if (!favourite) {
                        return;
                    }

                    const area = mapDistrictToArea(favourite.district);
                    if (!area) {
                        return;
                    }

                    const commands = `/li ${area} ${favourite.ward} ${favourite.plot}`;

                    const originalContent = button.innerHTML;
                    const markCopied = () => {
                        button.classList.remove('btn-outline-primary');
                        button.classList.add('btn-success');
                        button.innerHTML = '<i class="bi bi-check-lg" aria-hidden="true"></i><span class="ms-1">Copied</span>';
                        setTimeout(() => {
                            button.classList.remove('btn-success');
                            button.classList.add('btn-outline-primary');
                            button.innerHTML = originalContent;
                        }, 2000);
                    };

                    if (navigator?.clipboard?.writeText) {
                        navigator.clipboard.writeText(commands)
                            .then(markCopied)
                            .catch(() => {
                                fallbackCopy(commands);
                                markCopied();
                            });
                    }
                    else
                    {
                        fallbackCopy(commands);
                        markCopied();
                    }
                }
            });

            renderFavourites();
            syncCheckboxes();

            function fallbackCopy(text) {
                const textarea = document.createElement('textarea');
                textarea.value = text;
                textarea.setAttribute('readonly', '');
                textarea.style.position = 'absolute';
                textarea.style.left = '-9999px';
                document.body.appendChild(textarea);
                textarea.select();
                try {
                    document.execCommand('copy');
                } finally {
                    document.body.removeChild(textarea);
                }
            }

            function mapDistrictToArea(district) {
                if (!district) {
                    return null;
                }

                const normalised = district.trim().toLowerCase();

                if (normalised.includes('lavender')) {
                    return 'lavender';
                }

                if (normalised.includes('goblet')) {
                    return 'goblet';
                }

                if (normalised.includes('mist')) {
                    return 'mist';
                }

                if (normalised.includes('shirogane')) {
                    return 'shirogane';
                }

                if (normalised.includes('empyreum')) {
                    return 'empyreum';
                }

                return null;
            }
        })();
    </script>
}
