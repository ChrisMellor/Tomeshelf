@using System.Linq
@model Tomeshelf.Web.Models.Paissa.PaissaIndexViewModel

@{
    ViewData["Title"] = "Paissa Housing";
}

<div class="d-flex align-items-center mb-3">
    <h1 class="mb-0">Paissa Housing</h1>
    <span class="badge text-bg-primary ms-3">World @Model.WorldName (@Model.WorldId)</span>
</div>
<p class="text-muted">
    Showing @Model.TotalPlotCount plot@(Model.TotalPlotCount == 1 ? string.Empty : "s") accepting entries.
    Data captured at @Model.RetrievedAtUtc.ToLocalTime().ToString("f").
</p>

@if (!Model.Districts.Any())
{
    <div class="alert alert-info">
        No districts currently have plots accepting entries. Please check back later.
    </div>
}
else
{
    <ul class="nav nav-tabs" id="districtTabs" role="tablist">
        @for (var i = 0; i < Model.Districts.Count; i++)
        {
            var district = Model.Districts[i];
            var tabId = $"district-{district.Id}";
            var isActive = i == 0;
            var plotCount = district.Tabs.Sum(t => t.Plots.Count);
            <li class="nav-item" role="presentation">
                <button class="nav-link@(isActive ? " active" : string.Empty)" id="@($"{tabId}-tab")" data-bs-toggle="tab" data-bs-target="@($"#{tabId}")" type="button" role="tab" aria-controls="@tabId" aria-selected="@isActive">
                    @district.Name
                    <span class="badge text-bg-secondary ms-2">@plotCount</span>
                </button>
            </li>
        }
    </ul>
    <div class="tab-content pt-3" id="districtTabContent">
        @for (var i = 0; i < Model.Districts.Count; i++)
        {
            var district = Model.Districts[i];
            var tabId = $"district-{district.Id}";
            var accordionId = $"{tabId}-accordion";
            var isActive = i == 0;

            <div class="tab-pane fade@(isActive ? " show active" : string.Empty)" id="@tabId" role="tabpanel" aria-labelledby="@($"{tabId}-tab")" tabindex="0">
                <div class="accordion" id="@accordionId">
                    @for (var j = 0; j < district.Tabs.Count; j++)
                    {
                        var size = district.Tabs[j];
                        var collapseId = $"{accordionId}-{size.SizeKey}";
                        var headerId = $"{collapseId}-heading";
                        var isOpen = j == 0;

                        <div class="accordion-item">
                            <h2 class="accordion-header" id="@headerId">
                                <button class="accordion-button@(isOpen ? string.Empty : " collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="@($"#{collapseId}")" aria-expanded="@isOpen" aria-controls="@collapseId">
                                    @size.Size
                                    <span class="badge text-bg-secondary ms-2">@size.Plots.Count</span>
                                </button>
                            </h2>
                            <div id="@collapseId" class="accordion-collapse collapse@(isOpen ? " show" : string.Empty)" aria-labelledby="@headerId" data-bs-parent="@($"#{accordionId}")">
                                <div class="accordion-body">
                                    <div class="table-responsive">
                                        <table class="table table-sm align-middle">
                                            <thead>
                                                <tr>
                                                    <th scope="col">Ward</th>
                                                    <th scope="col">Plot</th>
                                                    <th scope="col">Price</th>
                                                    <th scope="col">Entries</th>
                                                    <th scope="col">Last Updated</th>
                                                    <th scope="col">Eligibility</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var plot in size.Plots)
                                                {
                                                    <tr>
                                                        <td>@plot.Ward</td>
                                                        <td>@plot.Plot</td>
                                                        <td>
                                                            <span class="fw-semibold">@plot.Price.ToString("N0")</span>
                                                            <small class="text-muted">gil</small>
                                                        </td>
                                                        <td>@plot.Entries</td>
                                                        <td>@plot.LastUpdatedUtc.ToLocalTime().ToString("g")</td>
                                                        <td>
                                                            <span class="badge @GetEligibilityBadgeClass(plot.PurchaseCategoryKey)">
                                                                @plot.PurchaseCategory
                                                            </span>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@functions {
    private static string GetEligibilityBadgeClass(string key)
    {
        return key switch
        {
            "personal" => "text-bg-primary",
            "free-company" => "text-bg-warning",
            "both" => "text-bg-success",
            _ => "text-bg-secondary"
        };
    }
}
