// <auto-generated />
#nullable disable

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Tomeshelf.Infrastructure.Persistence.Migrations.ComicCon
{
    [DbContext(typeof(TomeshelfComicConDbContext))]
    [Migration("20250917163426_AddPersonRemovedUtc")]
    partial class AddPersonRemovedUtc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.EventAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AutographAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("BoothNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DaysAtShow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PhotoOpAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PhotoOpTableAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("EventId", "PersonId")
                        .IsUnique();

                    b.ToTable("EventAppearances");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviantArt")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("KnownFor")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProfileUrlLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PubliclyVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Snapchat")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Tumblr")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Twitch")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoLink")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("YouTube")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.PersonCategory", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PersonCategories");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.PersonImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Big")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Med")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Small")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Thumb")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonImages");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventAppearanceId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("NoEndTime")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("VenueLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueLocationId");

                    b.HasIndex("EventAppearanceId", "ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.VenueLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("VenueLocations");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.EventAppearance", b =>
                {
                    b.HasOne("Tomeshelf.Domain.Entities.ComicCon.Event", "Event")
                        .WithMany("Appearances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tomeshelf.Domain.Entities.ComicCon.Person", "Person")
                        .WithMany("Appearances")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.PersonCategory", b =>
                {
                    b.HasOne("Tomeshelf.Domain.Entities.ComicCon.Category", "Category")
                        .WithMany("PersonLinks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tomeshelf.Domain.Entities.ComicCon.Person", "Person")
                        .WithMany("Categories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.PersonImage", b =>
                {
                    b.HasOne("Tomeshelf.Domain.Entities.ComicCon.Person", "Person")
                        .WithMany("Images")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Schedule", b =>
                {
                    b.HasOne("Tomeshelf.Domain.Entities.ComicCon.EventAppearance", "EventAppearance")
                        .WithMany("Schedules")
                        .HasForeignKey("EventAppearanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tomeshelf.Domain.Entities.ComicCon.VenueLocation", "VenueLocation")
                        .WithMany("Schedules")
                        .HasForeignKey("VenueLocationId");

                    b.Navigation("EventAppearance");

                    b.Navigation("VenueLocation");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Category", b =>
                {
                    b.Navigation("PersonLinks");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Event", b =>
                {
                    b.Navigation("Appearances");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.EventAppearance", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.Person", b =>
                {
                    b.Navigation("Appearances");

                    b.Navigation("Categories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Tomeshelf.Domain.Entities.ComicCon.VenueLocation", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
